export const runtime = "edge";

import { NextRequest, NextResponse } from "next/server";
import { first, run } from "@/app/lib/db";

// –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
async function tgSend(chatId: string | number, text: string) {
  const BOT = process.env.TELEGRAM_BOT_TOKEN || "";
  if (!BOT) return;
  await fetch(`https://api.telegram.org/bot${BOT}/sendMessage`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: "HTML", disable_web_page_preview: true })
  });
}

export async function POST(req: NextRequest) {
  const raw = await req.text();
  let update: any = null;
  try { update = JSON.parse(raw); } catch { return NextResponse.json({ ok:true }); }

  const msg = update?.message || update?.edited_message || null;
  const chatId = msg?.chat?.id ? String(msg.chat.id) : null;
  const text = (msg?.text || "").trim();

  if (!chatId) return NextResponse.json({ ok:true });

  // /start ord_<orderNumber>_<token>
  if (text.startsWith("/start")) {
    const payload = text.replace("/start", "").trim();
    const m = payload.match(/^ord_(.+)_(.+)$/);
    if (m) {
      const orderNumber = m[1];
      const token = m[2];

      const row = await first("SELECT order_number FROM tg_tokens WHERE token=? AND order_number=?", token, orderNumber);
      if (row) {
        await run("UPDATE orders SET customer_tg_chat_id=? WHERE number=?", chatId, orderNumber);
        await tgSend(chatId, [
          `üîî <b>DH22</b>`,
          `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑—É <b>${orderNumber}</b> –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.`,
          `–ú—ã —Å–æ–æ–±—â–∏–º –æ–± –æ–ø–ª–∞—Ç–µ, –ø–µ—Ä–µ–¥–∞—á–µ –≤ –¥–æ—Å—Ç–∞–≤–∫—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.`
        ].join("\n"));
        return NextResponse.json({ ok:true });
      }
    }
    // –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ payload ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await tgSend(chatId, `–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç DH22. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤ Telegram¬ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ¬´–°–ø–∞—Å–∏–±–æ¬ª.`);
    return NextResponse.json({ ok:true });
  }

  // /stop ‚Äî –æ—Ç–ø–∏—Å–∫–∞: –æ–±–Ω—É–ª–∏–º —É –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Å —ç—Ç–∏–º chat_id
  if (text === "/stop") {
    await run("UPDATE orders SET customer_tg_chat_id=NULL WHERE customer_tg_chat_id=?", chatId);
    await tgSend(chatId, `–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π DH22.`);
    return NextResponse.json({ ok:true });
  }

  return NextResponse.json({ ok:true });
}

